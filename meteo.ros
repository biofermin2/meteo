#!/bin/sh
#|-*- mode:lisp -*-|#
#|
exec ros -Q -- $0 "$@"
|#
(progn ;;init forms
  (ros:ensure-asdf)
  #+quicklisp(ql:quickload '(:unio :dexador :jonathan) :silent t) 
  )					; => (:UNIO :DEXADOR :JONATHAN)

(defpackage :ros.script.meteo.3845973535
  (:use :cl :unio :dexador :jonathan)
  (:shadow :delete :get)
  (:export :area-info :local-info))	; => #<PACKAGE "ROS.SCRIPT.METEO.3845973535">
(in-package :ros.script.meteo.3845973535) ; => #<PACKAGE "ROS.SCRIPT.METEO.3845973535">

(defconstant version "0.1.9")		; => VERSION

(defvar area-info)		; => AREA-INFO
(defvar local-data)		; => LOCAL-DATA
(defparameter area-ht (make-hash-table :test #'equal)) ; => AREA-HT

(defparameter w-code-plist
      '(100 ☼ 101 ☼☁ 102 ☼☔ 103 ☼☔ 104 ☼☃ 105 ☼☃ 106 ☼☔ 107 ☼☔ 108 ☼☔  110 ☼→☁ 111 ☼→☁ 112 ☼→☔ 113 ☼→☔ 114 ☼→☔ 115 ☼→☃ 116 ☼→☃ 117 ☼→☃ 118 ☼→☔ 119 ☼→☔ 120 ☼☔ 121 ☼☔ 122 ☼→☔ 123 ☼ 124 ☼ 125 ☼→☔ 126 ☼→☔ 127 ☼→☔ 128 ☼→☔ 130 ☼ 131 ☼ 132 ☼☁ 140 ☼☔ 160 ☼☃ 170 ☼☃ 181 ☼→☃
	200 ☁ 201 ☁☼ 202 ☁☔ 203 ☁☔ 204 ☁☃ 205 ༄☃ 206 ☁☔ 207 ☁☔ 208 ☁☔ 209 ☁ 210 ☁→☼ 211 ☁→☼ 212 ☁→☔ 213 ☁→☔ 214 ☁→☔ 215 ☁→☃ 216 ☁→☃ 217 ☁→☃ 218 ☁→☔ 219 ☁→☔ 228 ☁→☃ 229 ☁→☃ 230 ☁→☃ 231 ☁ 240 ☁☔ 250 ☁☃ 260 ☁☃ 270 ☁☃ 281 ☁→☃
	300 ☔ 301 ☔☼ 302 ☔☁ 303 ☔☃ 304 ☔ 306 ☔ 308 ༄☔ 309 ☔☃ 311 ☔→☼ 313 ☔→☁ 314 ☔→☃ 315 ☔→☃ 316 ☔→☼ 317 ☔→☁ 320 ☔→☼ 321 ☔→☁ 322 ☔☃ 323 ☔→☼ 324 ☔→☼ 325 ☔→☼ 326 ☔→☃ 327 ☔→☃ 328 ☔ 329 ☔ 340 ☃ 350 ☔ 361 ☔→☼ 371 ☔→☁
	400 ☃ 401 ☃☼ 402 ☃☁ 403 ☃☔ 405 ☃ 406 ༄☃ 407 ༄☃ 409 ☃☔ 411 ☃→☼ 413 ☃→☁ 414 ☃→☔ 420 ☃→☼ 421 ☃→☁ 422 ☃→☔ 423 ☃→☔ 425 ☃ 426 ☃ 427 ☃ 450 ☃
	500 ⭐🌙 501 ⭐🌙☁ 502 ⭐🌙☔ 504 ⭐🌙☃ 510 ⭐🌙→☁ 512 ⭐🌙→☔ 515 ⭐🌙→☃
	601 ☁⭐🌙 610 ☁→⭐🌙
	701 ☔⭐🌙 711 ☔→⭐🌙
	801 ☃⭐🌙 811 ☃→⭐🌙))			; => W-CODE-PLIST


(defun prompt-read (prompt)
  "copy from pratical common lisp"
  (format *query-io* "~a: " prompt)
  (force-output *query-io*)
  (read-line *query-io*))		; => PROMPT-READ

(defun put-ht (k v ht)
  (setf (gethash k ht) v))		; => PUT-HT

(defun puts-ht (lst ht)
  (loop :for i :in lst
	:count i :into cnt
	:do (put-ht cnt i ht)))		; => PUTS-HT

(defun chk-ht (ht)
    (maphash #'(lambda (k v)
		 (format t "~a: ~a~%" k v))
	     ht))			; => CHK-HT

(defun select-value (ht &aux (cnt (hash-table-count ht)))
  (if (= cnt 0)
      (error "There is no information applicable to the specified area.")
      (loop :for k :being :the hash-keys :in ht
	      :using (hash-value v)
	    :do (format *query-io* "~d: ~s~%" k v)
	    :finally (format *query-io* "select a number[1-~d]" cnt)))) ; => SELECT-VALUE


(defun upper-codes (muni)
  "put only Municipality as argument"
  (let* ((url "https://www.jma.go.jp/bosai/common/const/area.json")
	 (area-json (parse (dex:get url))))
    (sets area-info (seek muni area-json))
    (puts-ht area-info area-ht))
  (let* ((info (if (= 1 (hash-table-count area-ht))
		   (car area-info)
		   (gethash
		    (parse-integer (prompt-read (select-value area-ht)) :junk-allowed t)
		     area-ht)))
	 (code (getf (read-from-string info) 'parent))
	 (prefs-code (* 1000 (truncate (/ code 1000))))
	 (local-code (* 10 (truncate (/ code 10)))))
    (cond ((or (= prefs-code 460000)
	       (= prefs-code 014000)) (incf prefs-code 100))
	  ((= prefs-code 011000) (setq local-code prefs-code))) 
    (values (format nil "~6,'0d" prefs-code)
	    (format nil "~6,'0d" local-code)))) ; => UPPER-CODES

(defun code->sym (code)
  "change from weather code to symbol mark"
  (getf w-code-plist code))		; => CODE->SYM


(defun local-info (muni)
  (let ((base-url "https://www.jma.go.jp/bosai/forecast/data/forecast/"))
    (multiple-value-bind (prefs local)
	(upper-codes muni)
      (sets local-data
	    (seek local (parse (dex:get (format nil "~a~a.json" base-url prefs))) 1))
      (let ((d (read-from-string (car local-data))))
	(format t "~a~%" (reverse (pairlis (mapcar #'code->sym (getf d 'weathercodes))
					   (getf d 'weathers)))))))) ; => 

;; weather map 
(defvar now-list)						     ; => NOW-LIST

(defun today ()
  "現在日付の取得"
  (multiple-value-bind (s m h dd mm yy)
      (decode-universal-time (get-universal-time))
    (declare (ignore s m h))
    (format nil "~4,'0D-~2,'0D-~2,'0D" yy mm dd)))

(sets now-list
      (seek "now"
	    (parse (dex:get "https://www.jma.go.jp/bosai/weather_map/data/list.json") :as :alist))) 

(defmacro set-readtable (opt &body body)
  "opt:upcase,downcase,preserve,invert"
  `(let ((*readtable* (copy-readtable nil)))
     (setf (readtable-case *readtable*) ,opt)
     ,@body))				; => SET-READTABLE

(defun png-url (n)
  (let ((base-url "https://www.jma.go.jp/bosai/weather_map/data/png/"))
    (format nil "~a~a"
	    base-url
	    (car (set-readtable :preserve
				(last (read-from-string
				       (cond ((eq n 1) (first now-list))
					     ((eq n 2) (second now-list))
					     ((eq n 3) (third now-list))
					     ((eq n 4) (fourth now-list))
					     (t (error "put number 1〜4")))))))))) ; => PNG-URL

(defun download-file (uri &optional (filename))
  (with-open-file (out filename :direction :output
                       :if-exists :supersede
                       :element-type '(unsigned-byte 8))
		  (with-open-stream (input (dex:get uri :want-stream t :connect-timeout nil))
				    (loop :for b := (read-byte input nil -1)
					  :until (minusp b)
					  :do (write-byte b out))))) ; => DOWNLOAD-FILE

(defun out-png-name (n)
  (let (prefix)
    (setq prefix
	  (cond ((string= n "1") "asia-pacific-mono")
		((string= n "2") "asia-pacific-color")
		((string= n "3") "around-Japan-mono")
		((string= n "4") "around-Japan-color")))
    (format nil "~a-~a~a" prefix (today) ".png"))) ; => OUT-PNG-NAME

(defconstant print-help
  "this script pickups these 3 days weather forcast data from Japan Meteorological Agency,
and print it on your command line.

usage: $ meteo <your municipality in Chinese character>

option:
  -v, --version     print version
  -h, --help        print help
  -t <number:1〜4>  download weather map png file
     1: asia-pacific region monochrome
     2: asia-pacific region color
     3: around Japan monochrome
     4: around Japan color

usage: $ meteo <option>

sub option:
  -d, --detail      print detail info
  -a, --area-info   print area info

usage: $ meteo <municipality> <sub option>
")					; => PRINT-HELP


(defun system (control-string &rest args)
	;; copy from somewhere. sorry, I forgot.
  "Interpolate ARGS into CONTROL-STRING as if by FORMAT, and
synchronously execute the result using a Bourne-compatible shell, with
output to *verbose-out*.  Returns the shell's exit code."
  (let ((command (apply #'format nil control-string args)))
    (format t "; $ ~A~%" command)
    #+sbcl
    (sb-impl::process-exit-code
     (sb-ext:run-program
      "/usr/bin/zsh"
      (list  "-c" command)
      :input nil :output *standard-output*))
    #+(or cmu scl)
    (ext:process-exit-code
     (ext:run-program
      "/bin/sh"
      (list  "-c" command)
      :input nil :output *verbose-out*))
    #+clisp             ;XXX not exactly *verbose-out*, I know
    (ext:run-shell-command  command :output :terminal :wait t)
    ))					; => SYSTEM
	
(defun main (&rest argv)
  (declare (ignorable argv))
  (let ((1st (car argv))
	(2nd (cadr argv)))
    (cond
      ((or (string= 1st "--version")
	   (string= 1st "-v"))
       (format t "~a~%" version))
      ((or (string= 1st "--help")
	   (string= 1st "-h"))
       (format t print-help))
      ((string= 1st "-t")
       (let ((png-file (out-png-name 2nd)))
	 (download-file (png-url (parse-integer 2nd)) png-file)
	 ;;(system (format nil "xdg-open ~a~a" (truename "./") png-file)) 
	 ))
      (t (local-info 1st)
	 (cond ((or (string= 2nd "-d")
		    (string= 2nd "--detail"))
		(format t "~s" local-data))
	       ((or (string= 2nd "-a")
		    (string= 2nd "--area-info"))
		(format t "~s" area-info))))))) ; => MAIN

;;; vim: set ft=lisp lisp:

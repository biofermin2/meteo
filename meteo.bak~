#!/bin/sh
#|-*- mode:lisp -*-|#
#|
exec ros -Q -- $0 "$@"
|#
(progn ;;init forms
  (ros:ensure-asdf)
  #+quicklisp(ql:quickload '(:unio :assoc-utils :dexador :jonathan) :silent t) 
  )					; => (:UNIO :ASSOC-UTILS :DEXADOR :JONATHAN)

(defpackage :ros.script.meteo.3845973535
  (:use :cl :unio :dexador :jonathan :assoc-utils)
  (:shadow :delete :get)
  (:export :area-info :local-info))	; => #<PACKAGE "ROS.SCRIPT.METEO.3845973535">
(in-package :ros.script.meteo.3845973535) ; => #<PACKAGE "ROS.SCRIPT.METEO.3845973535">

(defconstant version "0.2.7")			     ; => VERSION
(defconstant url-top "https://www.jma.go.jp/bosai/") ; => URL-TOP

(defvar area-info)				       ; => AREA-INFO
(defvar local-data)				       ; => LOCAL-DATA
(defparameter area-ht (make-hash-table :test #'equal)) ; => AREA-HT


(defparameter w-code-plist
      '(100 ☼ 101 ☼☁ 102 ☼☔ 103 ☼☔ 104 ☼☃ 105 ☼☃ 106 ☼☔ 107 ☼☔ 108 ☼☔  110 ☼→☁ 111 ☼→☁ 112 ☼→☔ 113 ☼→☔ 114 ☼→☔ 115 ☼→☃ 116 ☼→☃ 117 ☼→☃ 118 ☼→☔ 119 ☼→☔ 120 ☼☔ 121 ☼☔ 122 ☼→☔ 123 ☼ 124 ☼ 125 ☼→☔ 126 ☼→☔ 127 ☼→☔ 128 ☼→☔ 130 ☼ 131 ☼ 132 ☼☁ 140 ☼☔ 160 ☼☃ 170 ☼☃ 181 ☼→☃
	200 ☁ 201 ☁☼ 202 ☁☔ 203 ☁☔ 204 ☁☃ 205 ༄☃ 206 ☁☔ 207 ☁☔ 208 ☁☔ 209 ☁ 210 ☁→☼ 211 ☁→☼ 212 ☁→☔ 213 ☁→☔ 214 ☁→☔ 215 ☁→☃ 216 ☁→☃ 217 ☁→☃ 218 ☁→☔ 219 ☁→☔ 228 ☁→☃ 229 ☁→☃ 230 ☁→☃ 231 ☁ 240 ☁☔ 250 ☁☃ 260 ☁☃ 270 ☁☃ 281 ☁→☃
	300 ☔ 301 ☔☼ 302 ☔☁ 303 ☔☃ 304 ☔ 306 ☔ 308 ༄☔ 309 ☔☃ 311 ☔→☼ 313 ☔→☁ 314 ☔→☃ 315 ☔→☃ 316 ☔→☼ 317 ☔→☁ 320 ☔→☼ 321 ☔→☁ 322 ☔☃ 323 ☔→☼ 324 ☔→☼ 325 ☔→☼ 326 ☔→☃ 327 ☔→☃ 328 ☔ 329 ☔ 340 ☃ 350 ☔ 361 ☔→☼ 371 ☔→☁
	400 ☃ 401 ☃☼ 402 ☃☁ 403 ☃☔ 405 ☃ 406 ༄☃ 407 ༄☃ 409 ☃☔ 411 ☃→☼ 413 ☃→☁ 414 ☃→☔ 420 ☃→☼ 421 ☃→☁ 422 ☃→☔ 423 ☃→☔ 425 ☃ 426 ☃ 427 ☃ 450 ☃
	500 ⭐🌙 501 ⭐🌙☁ 502 ⭐🌙☔ 504 ⭐🌙☃ 510 ⭐🌙→☁ 512 ⭐🌙→☔ 515 ⭐🌙→☃
	601 ☁⭐🌙 610 ☁→⭐🌙
	701 ☔⭐🌙 711 ☔→⭐🌙
	801 ☃⭐🌙 811 ☃→⭐🌙))		; => W-CODE-PLIST

(defparameter prefs '(北海道 青森県 岩手県 宮城県 秋田県
			  山形県 福島県 茨城県 栃木県 群馬県
			  埼玉県 千葉県 東京都 神奈川 新潟県
			  富山県 石川県 福井県 山梨県 長野県
			  岐阜県 静岡県 愛知県 三重県 滋賀県
			  京都府 大阪府 兵庫県 奈良県 和歌山県
			  鳥取県 島根県 岡山県 広島県 山口県
			  徳島県 香川県 愛媛県 高知県 福岡県
			  佐賀県 長崎県 熊本県 大分県 宮崎県
		      鹿児島県 沖縄県))	; => PREFS



(defun show-pref-name (n)
  (nth (1- n) prefs))			; => SHOW-PREF-NAME


(defun pref-num (code)
  (truncate (/ code 10000.0)))		; => PREF-NUM

(defun code->name (code)
  (show-pref-name (pref-num code)))	; => CODE->NAME

(defun prompt-read (prompt)
  "from practical common lisp"
  (format *query-io* "~a: " prompt)
  (force-output *query-io*)
  (read-line *query-io*))		; => PROMPT-READ


(defun system (control-string &rest args)
  "Interpolate ARGS into CONTROL-STRING as if by FORMAT, and
synchronously execute the result using a Bourne-compatible shell, with
output to *verbose-out*.  Returns the shell's exit code."
  (let ((command (apply #'format nil control-string args)))
    (format t "; $ ~A~%" command)
    #+sbcl
    (sb-impl::process-exit-code
     (sb-ext:run-program
      "/usr/bin/zsh"
      (list  "-c" command)
      :input nil :output *standard-output*))
    #+(or cmu scl)
    (ext:process-exit-code
     (ext:run-program
      "/bin/sh"
      (list  "-c" command)
      :input nil :output *verbose-out*))
    #+clisp             ;XXX not exactly *verbose-out*, I know
    (ext:run-shell-command  command :output :terminal :wait t)
    ))					; => SYSTEM


(defun put-ht (k v ht)
  (setf (gethash k ht) v))		; => PUT-HT

(defun print-ht (ht)
  "ハッシュ表の出力関数"
  (maphash #'(lambda (k v) (print (list k v))) ht)) ; => PRINT-HT

(defun puts-ht (lst ht)
  (loop :for i :in lst
	:count i :into cnt
	:do (put-ht cnt i ht)))		; => PUTS-HT


(defun pp-ht (lst ht)
  "puts-htの処理中に県名を追加出来るように専用加工した関数[2022-07-02 15:22:16]修正"
  (loop :for i :in lst
       :count i :into cnt
     :do (put-ht cnt (nconc `(pref-name ,(code->name (getf i '|parent|))) i) ht))) ; => PP-HT


(defun restart-err ()
  (restart-case (error "There is no information applicable to the specified area.")
    (use-value (value) 
      :report "Use a value."
      :interactive (lambda () 
		     (list (read)))
      value)
    (ignore ()
      :report "Ignore."
      nil)))				; => RESTART-ERR

(defun select-value (ht &aux (cnt (hash-table-count ht)))
  (cond ((= cnt 0) (restart-err))
	(t (loop :for k :being :the hash-keys :in ht
		   :using (hash-value v)
		 :do (format *query-io* "~d: ~(~s~)~%" k v)
		 :finally (format *query-io* "select a number[1-~d]" cnt))))) ; => SELECT-VALUE

(defun upper-codes (muni)
  "fix [2022-07-02 17:50:58]put only Municipality as argument"
  (let* ((url-bot "common/const/area.json")
	 (area-json (parse (remove #\, (dex:get (format nil "~a~a" url-top url-bot))))))
    (setf area-info (seek muni area-json :exact t :opt :preserve :str nil))
    (pp-ht area-info area-ht))
  (let* ((info (if (= 1 (hash-table-count area-ht))
		   (car area-info)
		   (gethash
		    (parse-integer (prompt-read (select-value area-ht)) :junk-allowed t)
		    area-ht)))
	 (code (getf info '|parent|))
	 (prefs-code (* 1000 (truncate (/ code 1000))))
	 (local-code (* 10 (truncate (/ code 10)))))
    (setf area-info info)
    (cond ((or (= prefs-code 460000)
	       (= prefs-code 014000)) (incf prefs-code 100))
	  ((= prefs-code 011000) (setq local-code prefs-code))) 
    (values (format nil "~6,'0d" prefs-code)
	    (format nil "~6,'0d" local-code)))) ; => UPPER-CODES


(defun code->sym (code)
  "change from weather code to symbol mark"
  (getf w-code-plist code))		; => CODE->SYM

(defun local-info (muni)
  "fix[2022-07-02 17:50:46]"
  (let ((url-mid "forecast/data/forecast/"))
    (multiple-value-bind (prefs local)
	(upper-codes muni)
      (let ((json-data (parse (dex:get (format nil "~a~a~a.json" url-top url-mid prefs)))))
	(setf local-data
	      (seek local json-data :skin 1 :str nil :opt :preserve)))
      (let ((d (apply #'append local-data)))
	(format t "~a~%" (reverse (pairlis (mapcar #'code->sym (getf d '|weatherCodes|))
				 (getf d '|weathers|)))))))) ; => LOCAL-INFO

;; weather map

(defun today ()
  "現在日付の取得"
  (multiple-value-bind (s m h dd mm yy)
      (decode-universal-time (get-universal-time))
    (declare (ignore s m h))
    (format nil "~4,'0D-~2,'0D-~2,'0D" yy mm dd))) ; => TODAY

(defmacro set-readtable (opt &body body)
  "opt:upcase,downcase,preserve,invert"
  `(let ((*readtable* (copy-readtable nil)))
     (setf (readtable-case *readtable*) ,opt)
     ,@body))				; => SET-READTABLE

(defun map-url (n)
  ;; "fix[2022-07-02 18:24:14]"
  ;; "データ取得元のurlの生成"
  (let* ((url-mid "weather_map/data/png/")
	 (url-bot "weather_map/data/list.json")
	 (list-json (parse (dex:get (format nil "~a~a" url-top url-bot)) :as :alist))
	 (now-lst (seek "now" list-json :str nil :opt :preserve)))
    (format nil "~a~a~a"
	    url-top
	    url-mid
	    (car (last (cond ((= n 1) (first now-lst))
			     ((= n 2) (second now-lst))
			     ((= n 3) (third now-lst))
			     ((= n 4) (fourth now-lst))
			     (t (error "put number 1〜4")))))))) ; => MAP-URL


(defun download-file (uri &optional (filename))
  (with-open-file (out filename :direction :output
				:if-exists :supersede
				:element-type '(unsigned-byte 8))
    (with-open-stream (input (dex:get uri :want-stream t :connect-timeout nil))
      (loop :for b := (read-byte input nil -1)
	    :until (minusp b)
	    :do (write-byte b out)))))	; => DOWNLOAD-FILE

(defun map-name (n)
  "出力用のファイル名の生成"
  (let ((prefix
	 (cond ((string= n "1") "asia-pacific-mono")
	       ((string= n "2") "asia-pacific-color")
	       ((string= n "3") "around-Japan-mono")
	       ((string= n "4") "around-Japan-color"))))
    (format nil "~a-~a.png" prefix (today)))) ; => MAP-NAME

(defun show-weather-map (n)
  (let ((out-file (map-name n)))
    (download-file (map-url (parse-integer n)) out-file)
    (system (format nil "xdg-open ~a~a" (truename "./") out-file)))) ; => SHOW-WEATHER-MAP

;; Satellite image

(defun center-pt (z)
  (expt 2 (+ z 7)))			; => CENTER-PT

(defun total-px (z)
  (* (center-pt z) 2))			; => TOTAL-PX

(defun px/deg (z)
  (/ (total-px z) 360))			; => PX/DEG

(defun lon->x (lon z)
  (floor (/ (+ (center-pt z) (* lon (px/deg z)) 0.5) 256))) ; => LON->X

(defun px/rad (z)
  (/ (total-px z) (* 2 pi)))		; => PX/RAD

(defun siny (lat)
  (min (max (sin (* lat (/ pi 180))) -0.9999) 0.9999)) ; => SINY

(defun lat->y (lat z)
  (floor
   (/ (+ 0.5 (- (center-pt z)
		(* 0.5 (log (/ (+ 1 (siny lat))
			       (- 1 (siny lat))))
		   (px/rad z)))) 256)))	; => LAT->Y

(defun rm-last-char (str)
  (subseq str 0 (1- (length str))))	; => RM-LAST-CHAR


(defun lon/lat (muni)
  "fix[2022-07-02 18:47:58] ここで緯度経度を出力している!"
  (let* ((name (rm-last-char muni))
	 (url-mid "amedas/const/")
	 (amedas-data (parse (dex:get (format nil "~a~a~a" url-top url-mid "amedastable.json"))))
	 (local-amedas (car (seek name amedas-data :str nil))))
    (values (car (getf local-amedas 'lon))
	    (car (getf local-amedas 'lat))))) ; => LON/LAT


(defun show-sat-img (muni n)
  "zはzoomレベル6固定"
  (let (prefix
	b/p
	(num (parse-integer n)))
    (cond ((= num 1) (setq prefix "infrared"
			   b/p "B13/TBB")) ;赤外画像
	  ((= num 2) (setq prefix "visible"
			   b/p "B03/ALBD")) ;可視画像
	  ((= num 3) (setq prefix "water-vapor"
			   b/p "B08/TBB")) ;水蒸気画像
	  ((= num 4) (setq prefix "truecolor"
			   b/p "REP/ETC")) ;true color再現画像
	  ((= num 5) (setq prefix "cloud-top"
			   b/p "SND/ETC")) ;雲頂強調画像
	  (t (error "select number [1-5]")))
    (multiple-value-bind (lon lat)
	(lon/lat muni)
      (let* ((url-mid "himawari/data/satimg/")
	     (latest-time
	       (car (last (parse (dex:get
				  (format nil "~a~atargetTimes_jp.json" url-top url-mid))))))
	     (z 6)
	     (x (lon->x lon z))
	     (y (lat->y lat z))
	     (out-file (format nil "~a-~a-~a.jpg" prefix (today) muni)))
	(multiple-value-bind (bt vt)
	    (values (getf latest-time :|basetime|)
		    (getf latest-time :|validtime|))
	  (download-file (format nil "~a~a~a/jp/~a/~a/~a/~a/~a.jpg"
				 url-top url-mid bt vt b/p z x y)
			 out-file)
	  (system (format nil "xdg-open ~a~a" (truename "./") out-file))))))) ; => SHOW-SAT-IMG

;; now cast
;; https://www.jma.go.jp/bosai/jmatile/data/nowc/targetTimes_N1.json
;; https://www.jma.go.jp/bosai/jmatile/data/nowc/targetTimes_N2.json
;; https://www.jma.go.jp/bosai/himawari/data/nowc/{basetime}/none/{validtime}/surf/hrpns/{z}/{x}/{y}.png
;; 地図の種類
;; 標準地図 std 5-18
;; 淡色地図 pale 5-18
;; English english 5-11
;; 数値地図25000（土地条件） lcm25k_2012 10-16
;; 土地条件図（初期整備版） lcm25k 14-16
;; 沿岸海域土地条件図 ccm1 （平成元年以降） ccm2 （昭和63年以前） 14-16
;; 白地図 blank 5-14
;; x 写真 seamlessphoto 2-18
;; 世界衛星モザイク画像 modis 2-8
;; x 全国ランドサットモザイク画像 lndst 2-15
;; 色別標高図 relief 5-15
;; アナグリフ anaglyphmap_color anaglyphmap_gray 2-16
;; 陰影起伏図 hillshademap 2-16
;; 傾斜量図 slopemap 3-15
;; 全国傾斜量区分図（雪崩関連） slopezone1map 3-15


(defun show-nowcast (muni n &optional (map-type "relief"))
  "z (ズームレベル) は 4～10"
  (multiple-value-bind (lon lat)
      (lon/lat muni)
    (let* ((url-mid "jmatile/data/nowc/")
	   (latest-time
	     (car (parse (dex:get
			  (format nil "~a~a~a" url-top url-mid "targetTimes_N1.json"))
			 :as :alist)))
	   (gsi-url "https://cyberjapandata.gsi.go.jp/xyz/")
	   (z (parse-integer n))
	   (x (lon->x lon z))
	   (y (lat->y lat z))
	   nowcast-layer
	   map-layer
	   (nowcast-file (format nil "~a~a" (truename "./") "nowcast.png"))
	   (map-file (format nil "~a~a" (truename "./") "map.png"))
	   (out-file (format nil "nowcast-~a-~a-~a.png" (today) muni z)))
      (multiple-value-bind (bt vt)
	  (values (aget latest-time "basetime")
		  (aget latest-time "validtime"))
	(setf nowcast-layer (format nil "~a~a~a/none/~a/surf/hrpns/~a/~a/~a.png"
				    url-top url-mid bt vt z x y))
	(setf map-layer (format nil "~a~a/~a/~a/~a.png" gsi-url map-type z x y))
	(download-file nowcast-layer nowcast-file)
	(download-file map-layer map-file)
	(system (format nil "~a ~a ~a ~a" "composite -compose over" nowcast-file map-file out-file))
	(system (format nil "xdg-open ~a~a" (truename "./") out-file)))))) ; => SHOW-NOWCAST


(defconstant print-help
  "this script pickups these 3 days weather forcast data from Japan Meteorological Agency,
and print it on your command line. ;=> https://github.com/biofermin2/meteo

usage1: $ meteo <your municipality in Chinese character>

usage2: $ meteo <option>

option:
  -v, --version            print version
  -h, --help               print help
  -m <number:1〜4>, --map  download weather map file
     1: asia-pacific region monochrome
     2: asia-pacific region color
     3: around Japan monochrome
     4: around Japan color

usage3: $ meteo <municipality> <sub option>

sub option:
  -d, --detail                    print detail info
  -a, --area-info                 print area info
  -s <number:1〜5>, --satellite   show satellite image
     1:infrared image
     2:visible image
     3:water-vapor image
     4:truecolor image
     5:cloud-top image
  -n <number:5〜8>, --nowcast     show nowcast image
    number means zoom level. recommend is 6.

")					; => PRINT-HELP

(defun main (&rest argv)
  (declare (ignorable argv))
  (let ((1st (first argv))
	(2nd (second argv))
	(3rd (third argv))
	(4th (fourth argv)))
    (cond
      ((or (string= 1st "--version")
	   (string= 1st "-v"))
       (format t "~a~%" version))
      ((or (string= 1st "--help")
	   (string= 1st "-h"))
       (format t print-help))
      ((or (string= 1st "-m")
	   (string= 1st "--map"))
       (show-weather-map 2nd))
      (t (local-info 1st)
	 (cond ((or (string= 2nd "-d")
		    (string= 2nd "--detail"))
		(format t "~(~s~)" local-data))
	       ((or (string= 2nd "-a")
		    (string= 2nd "--area-info"))
		(format t "~(~s~)" area-info))
	       ((or (string= 2nd "-s")
		    (string= 2nd "--satellite"))
		(show-sat-img 1st 3rd))
	       ((or (string= 2nd "-n")
		    (string= 2nd "--nowcast"))
		(if 4th
		    (show-nowcast 1st 3rd 4th)
		    (show-nowcast 1st 3rd)))))))) ; => MAIN

;;; vim: set ft=lisp lisp:
